generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Brand {
  id        String   @id @default(cuid())
  slug      String   @unique
  name      String
  logoUrl   String?
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  name      String
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          String            @id @default(cuid())
  slug        String            @unique
  title       String
  subtitle    String?
  description String?
  imageUrl    String?
  brandId     String?
  brand       Brand?            @relation(fields: [brandId], references: [id])
  variants    ProductVariant[]
  categories  Category[]        @relation("ProductCategories")
  reviews     Review[]
  attributes  String?
  ratingAvg   Float?            @default(0)
  ratingCnt   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model ProductVariant {
  id         String     @id @default(cuid())
  productId  String
  product    Product    @relation(fields: [productId], references: [id])
  sku        String     @unique
  name       String
  priceCents Int
  currency   String     @default("EUR")
  inStock    Int        @default(0)
  weightGr   Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  title      String?
  body       String?
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Cart {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      CartItem[]
}

model CartItem {
  id         String         @id @default(cuid())
  cartId     String
  cart       Cart           @relation(fields: [cartId], references: [id])
  variantId  String
  variant    ProductVariant @relation(fields: [variantId], references: [id])
  qty        Int            @default(1)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          String      @default("PENDING")
  totalCents      Int
  currency        String      @default("EUR")
  paymentMethod   String?
  paymentStatus   String      @default("PENDING")
  paymentIntentId String?
  trackingNumber  String?
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  qty       Int
  priceCents Int
}